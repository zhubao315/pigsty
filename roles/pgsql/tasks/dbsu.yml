---
#--------------------------------------------------------------#
# PostgreSQL Database Superuser                        [pg_dbsu]
#--------------------------------------------------------------#
- name: create postgres dbsu
  become: yes
  tags: pg_dbsu
  block:

    # - dbsu user and group - #
    - name: create os group postgres
      group: name=postgres gid={{ pg_dbsu_uid }}
    - name: create postgres dbsu
      user: name={{ pg_dbsu }} uid={{ pg_dbsu_uid }} home={{ pg_dbsu_home }} group=postgres groups=postgres shell=/bin/bash generate_ssh_key=yes

    # - dbsu privilege - #
    # nopass : no password required to execute all sudo command! DANGEROUS!
    # all    : require password to execute all sudo command! NOT RECOMMENDED!
    # limit  : only allow sudo command with limited privilege! DEFAULT MODE!
    - name: grant postgres dbsu sudo privilege
      tags: pg_dbsu_sudo
      copy:
        dest: /etc/sudoers.d/postgres
        mode: 0440
        content: |
          {% if pg_dbsu_sudo == 'nopass' %}postgres ALL=(ALL) NOPASSWD: ALL{% endif %}
          {% if pg_dbsu_sudo == 'all' %}postgres ALL=(ALL) ALL{% endif %}
          {% if pg_dbsu_sudo == 'limit' %}
          %postgres ALL=NOPASSWD: /sbin/modprobe softdog
          %postgres ALL=NOPASSWD: /bin/chown {{ pg_dbsu }} /dev/watchdog
          {% for svc in ['postgres', 'pgbouncer', 'patroni', 'pg_exporter', 'pgbouncer_exporter', 'vip-manager', 'pgbackrest' ] %}
          %postgres ALL=NOPASSWD: /bin/systemctl stop {{ svc }}
          %postgres ALL=NOPASSWD: /bin/systemctl start {{ svc }}
          %postgres ALL=NOPASSWD: /bin/systemctl status {{ svc }}
          %postgres ALL=NOPASSWD: /bin/systemctl reload {{ svc }}
          %postgres ALL=NOPASSWD: /bin/systemctl restart {{ svc }}
          
          {% endfor %}
          %postgres ALL=NOPASSWD: /bin/systemctl reload haproxy
          {% endif %}

    # - watchdog owner - #
    - name: grant postgres dbsu watchdog owner
      ignore_errors: true
      file: path=/dev/watchdog owner={{ pg_dbsu }} group=postgres

    # - dbsu ssh - #
    - name: config postgres dbsu ssh no host checking
      lineinfile:
        path: "{{ pg_dbsu_home }}/.ssh/config"
        regexp: '^StrictHostKeyChecking='
        line: StrictHostKeyChecking=no
        create: yes

    # postgres ssh-key exchange
    - name: fetch postgres dbsu public keys
      shell: cat {{ pg_dbsu_home }}/.ssh/id_rsa.pub
      register: dbsu_ssh_keys
      args: { executable: /bin/bash }

    # for all hosts, copy their postgres ssh public key to each other
    - name: exchange postgres dbsu ssh keys
      when: pg_dbsu_ssh_exchange|bool
      authorized_key: user={{ pg_dbsu }} key="{{ item[0] }}"
      ignore_errors: true
      delegate_to: "{{ item[1] }}"
      with_nested:
        - "{{ dbsu_ssh_keys.stdout }}"
        - "{{ play_hosts }}"
...