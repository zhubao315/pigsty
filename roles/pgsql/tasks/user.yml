---
#--------------------------------------------------------------#
# Create Business User                                 [pg_user]
#--------------------------------------------------------------#
- name: create postgres user
  tags: pg_user
  when: pg_role == 'primary'
  block:

    - name: prepare sql for user {{ user.name }}
      tags: pg_user_config
      template: src="pg-user.sql" dest=/pg/tmp/pg-user-{{ user.name }}.sql owner={{ pg_dbsu|default('postgres') }} group=postgres mode=0755

    - name: create postgres user {{ user.name }}
      tags: pg_user_create
      ignore_errors: true
      become_user: "{{ pg_dbsu|default('postgres') }}"
      shell: |
        psql -h {{ pg_localhost|default('/var/run/postgresql') }}  -p {{ pg_port|default(5432) }} -d postgres -AXtwqf /pg/tmp/pg-user-{{ user.name }}.sql || true;
        role_exists=$(psql -h {{ pg_localhost|default('/var/run/postgresql') }} -p {{ pg_port|default(5432) }} -d postgres -AXtwqc "SELECT true WHERE EXISTS(SELECT * FROM pg_authid WHERE rolname = '{{ user.name }}' LIMIT 1)")
        [[ -z "${role_exists}" ]] && exit 1 || exit 0
      args: { executable: /bin/bash }

- name: write plain biz user password to pgpass for citus cluster
  tags: pg_user
  become_user: "{{ pg_dbsu|default('postgres') }}"
  when: pg_mode is defined and pg_mode|default('pgsql') == 'citus' and user.password is defined and user.password != '' and not user.password.startswith('md5')  and not user.password.startswith('scram')
  shell: /bin/bash /pg/bin/pg-pass-add "{{ user.name }}" "{{ user.password }}"
  args: { executable: /bin/bash }
  no_log: true
...