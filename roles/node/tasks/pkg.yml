---
#--------------------------------------------------------------#
# Install node repo (public or local)                [node_repo]
#--------------------------------------------------------------#
- name: setup node repo
  tags: node_repo
  block:

    # remove existing repos to /etc/yum.repos.d/backup
    - name: remove and backup existing repo file
      when: node_repo_remove|bool
      shell: |
        {% if os_package == 'rpm' %}
        mkdir -p /etc/yum.repos.d/backup;
        mv -f /etc/yum.repos.d/*.repo /etc/yum.repos.d/backup/
        {% elif os_package == 'deb' %}
        mkdir -p /etc/apt/backup;
        mv -f /etc/apt/sources.list.d/* /etc/apt/backup/ 2> /dev/null || /bin/true
        mv -f /etc/apt/sources.list     /etc/apt/backup/ 2> /dev/null || /bin/true
        {% endif %}
        /bin/true
      args: { executable: /bin/bash }

    # install local repo from url (default behaviour) (rpm/yum version)
    - name: add local yum repo file
      when: os_package == 'rpm' and (node_repo_method == 'local' or node_repo_method == 'both')
      get_url:
        url: "{{ item|replace('${admin_ip}', admin_ip) }}"
        dest: /etc/yum.repos.d/{{ item | basename }}
      with_items: "{{ node_repo_local_urls }}"

    # install local repo from url (default behaviour) (deb/apt version)
    - name: add local apt repo file
      when: os_package == 'deb' and ( node_repo_method == 'local' or node_repo_method == 'both')
      copy:
        dest: /etc/apt/sources.list.d/pigsty.list
        content: |
          {% for item in node_repo_local_urls %}
          {{ item | replace('${admin_ip}', admin_ip) }}
          {% endfor %}

    - name: add public upstream repo file to node
      copy:
        dest: "{{ upstream_dir }}/{{ upstream_file }}"
        content: |
          #=========# [{{ module_name }}] on {{ os_vendor }}{{ os_version }} : {{ os_codename }} {{ os_package }} repo
          
          {% for repo in repo_upstream %}
          {% if os_version|int in repo.releases and repo.module == module_name %}
          {% if os_package == 'rpm' %}
          [{{ repo.name }}]
          name = {{ repo.description }} $releasever - $basearch
          {% if region in repo.baseurl and repo.baseurl[region] != '' %}
          baseurl = {{ repo.baseurl[region] | replace('$releasever', os_version|string)  }}
          {% else %}
          baseurl = {{ repo.baseurl.default | replace('$releasever', os_version|string)  }}
          {% endif %}
          gpgcheck = 0
          enabled = 1
          {% if os_version|int >= 8 %}
          module_hotfixes=1
          {% endif %}
          {% elif os_package == 'deb' %}
          {% if region in repo.baseurl and repo.baseurl[region] != '' %}
          # [module_name] [{{ os_codename }}:{{ os_version }}] {{ repo.name }}: {{ repo.description }}
          deb [trusted=yes] {{ repo.baseurl[region] | replace('${distro_codename}', os_codename) | replace('${distro_name}', os_vendor) }} 
          {% else %}
          deb [trusted=yes] {{ repo.baseurl.default | replace('${distro_codename}', os_codename) | replace('${distro_name}', os_vendor)  }}
          {% endif %}
          {% endif %}
          
          {% endif %}
          {% endfor %}
      vars:
        upstream_dir: "{% if os_package == 'rpm' %}/etc/yum.repos.d{% else %}/etc/apt/sources.list.d{% endif %}"
        upstream_file: "{% if os_package == 'rpm' %}{{ item }}.repo{% else %}{{ item }}.list{% endif %}"
        module_name: "{{ item }}"
      when: (node_repo_method == 'public' or node_repo_method == 'both')
      with_items: "{{ repo_modules.split(',') }}"

    - name: make node local repo cache
      tags: node_repo_cache
      shell: |
        {% if os_package == 'rpm' %}
        yum makecache;    
        {% elif os_package == 'deb' %}
        apt update
        {% endif %}
      args: { executable: /bin/bash }

#--------------------------------------------------------------#
# Install packages                                    [node_pkg]
#--------------------------------------------------------------#
- name: install node packages
  tags: node_pkg
  block:

    - name: supress deb auto start with policy-rc.d
      copy: src=policy-rc.d dest=/usr/sbin/policy-rc.d mode=0755
      when: os_package == 'deb'

    - name: install default node packages
      environment: "{{ proxy_env | default({}) }}"
      package: name={{ item }}
      with_items: "{{ node_default_packages }}"

    - name: install extra node packages
      environment: "{{ proxy_env | default({}) }}"
      package: name={{ item }}
      with_items: "{{ node_packages }}"

    - name: install keepalived if enabled
      tags: node_vip
      when: vip_enabled|bool
      environment: "{{ proxy_env | default({}) }}"
      package: name={{ item }}
      with_items:
        - keepalived
        - "{% if os_package|default('rpm') == 'deb' %}keepalived-exporter{% else %}keepalived_exporter{% endif %}"
...